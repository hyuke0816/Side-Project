# \uD3EC\uD2B8 \uC124\uC815
server.port=8000

# .yml \uC124\uC815
# server:
# port : '8000'

##.yml
#spring:
#    datasource:
#        driver-class-name:
#        url:
#        username:
#        password:


## TODO: \uB85C\uCEEC DB \uC811\uC18D \uC815\uBCF4
## driver-class-name=db\uB77C\uC774\uBE0C\uB7EC\uB9AC : DB \uB77C\uC774\uBE0C\uB7EC\uB9AC \uC815\uBCF4(Oracle, Mysql \uB4F1\uB4F1)
#spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
## url=db\uC811\uC18D\uC815\uBCF4 : jdbc:log4jdbc:oracle:thin:@DBip\uC815\uBCF4:DB\uD3EC\uD2B8\uBC88\uD638/DB\uBA85
#spring.datasource.url=jdbc:log4jdbc:oracle:thin:@localhost:1521/xe
## username=DB\uACC4\uC815\uBA85
#spring.datasource.username=scott
## password=DB\uD328\uC2A4\uC6CC\uB4DC
#spring.datasource.password=tiger


## TODO: \uC624\uB77C\uD074 \uD074\uB77C\uC6B0\uB4DC DB \uC811\uC18D \uC815\uBCF4
#spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
## jdbc:log4jdbc:oracle:thin:@orcl_low?TNS_ADMIN=\uC804\uC790\uC9C0\uAC11\uACBD\uB85C
#spring.datasource.url=jdbc:log4jdbc:oracle:thin:@DsCloud95_high?TNS_ADMIN=/Users/hyuk/VScode_workout/04_SQL/Wallet_DsCloud95
#spring.datasource.username=JANGDH93
#spring.datasource.password=Ehdtjdwkdehdgur93

# TODO: \uC624\uB77C\uD074 \uD074\uB77C\uC6B0\uB4DC DB \uC811\uC18D \uC815\uBCF4
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
# jdbc:log4jdbc:oracle:thin:@orcl_low?TNS_ADMIN=\uC804\uC790\uC9C0\uAC11\uACBD\uB85C
spring.datasource.url=jdbc:log4jdbc:oracle:thin:@dongsungteamproject_high?TNS_ADMIN=/Users/hyuk/VScode_workout/github/cloud_wallet/Wallet_DONGSUNGTEAMPROJECT
spring.datasource.username=SIDEPROJECT
spring.datasource.password=Tkdlemvmfhwprxm123
#spring.datasource.username=JANGDH93
#spring.datasource.password=Ehdtjdwkdehdgur93


# HikariCP settings : \uD074\uB77C\uC6B0\uB4DC DB \uC811\uC18D\uC744 1\uAC1C\uB85C \uC81C\uD55C\uD558\uB294 \uC124\uC815
spring.datasource.hikari.minimumIdle=1
spring.datasource.hikari.maximumPoolSize=1
spring.datasource.hikari.poolName=HikariPoolBooks


# jpa \uC124\uC815
# .ddl-auto=create -> \uC11C\uBC84 \uC7AC\uC2DC\uC791 \uC2DC \uAE30\uC874 \uD14C\uC774\uBE14(DB \uC624\uBE0C\uC81D\uD2B8) \uC0AD\uC81C \uD6C4 \uB2E4\uC2DC \uC0DD\uC131\uD558\uB294 \uC635\uC158
# .ddl-auto=update -> \uC11C\uBC84 \uC7AC\uC2DC\uC791 \uC2DC \uD14C\uC774\uBE14(DB \uC624\uBE0C\uC81D\uD2B8) \uC5C6\uB294 \uAC83\uB9CC \uB2E4\uC2DC \uC0DD\uC131\uD558\uB294 \uC635\uC158
# .ddl-auto=none -> \uC11C\uBC84 \uC7AC\uC2DC\uC791 \uC2DC \uC544\uBB34 \uAC83\uB3C4 \uC548\uD568
# spring.jpa.show-sql=true : \uC2A4\uD504\uB9C1 \uCF58\uC194\uC5D0 sql\uBB38\uC744 \uBCF4\uC5EC\uC8FC\uB294 \uB85C\uADF8 \uD65C\uC131\uD654
# spring.jpa.database-platform=DB_\uC81C\uD488\uC124\uC815(Oracle, MySql \uB4F1)



## TODO:\uB85C\uCEEC\uC5D0\uC11C db \uB370\uC774\uD130 \uAD00\uB9AC\uD560 \uB54C \uCF1C\uC57C\uD568
spring.jpa.hibernate.ddl-auto=create

# TODO:\uC624\uB77C\uD074 \uD074\uB77C\uC6B0\uB4DC\uC5D0\uC11C \uB370\uC774\uD130 \uAD00\uB9AC\uD560 \uB54C \uCF1C\uC57C\uD568
#spring.jpa.hibernate.ddl-auto=none




#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
spring.jpa.show-sql=true
# 1) resource/data.sql \uC790\uB3D9 \uC2E4\uD589 ( DML \uC2E4\uD589 )
#  -> data.sql ( dml \uC2E4\uD589 ), schema.sql ( ddl \uC2E4\uD589 )
spring.jpa.defer-datasource-initialization=true
# sql log \uCC0D\uAE30
spring.jpa.properties.hibernate.format_sql=true
#Logging Setting , hibernate info \uB808\uBCA8 \uB85C\uAE45 \uC124\uC815 : debug, trace \uB4F1
logging.level.org.hibernate=info
# 2)  resource/data.sql \uC790\uB3D9 \uC2E4\uD589 ( DML \uC2E4\uD589 )
#  -> data.sql ( dml \uC2E4\uD589 ), schema.sql ( ddl \uC2E4\uD589 )




# TODO: \uC624\uB77C\uD074 \uD074\uB77C\uC6B0\uB4DC\uC5D0\uC11C \uB370\uC774\uD130 \uAD00\uB9AC\uD560 \uB54C \uC8FC\uC11D\uCC98\uB9AC\uD574\uC57C\uD568
spring.sql.init.mode=always





# \uC11C\uBC84 \uC2DC\uC791\uC2DC sql\uBB38 \uC2E4\uD589\uD560 \uB54C \uC624\uB958 \uBB34\uC2DC\uD558\uACE0 \uACC4\uC18D \uC9C4\uD589
spring.sql.init.continue-on-error=true


# \uC790\uBC14 \uC18C\uC2A4 \uBCC0\uACBD \uC2DC \uC790\uB3D9 \uC7AC\uC2DC\uC791 ( \uC2DC\uAC04 \uD2C8\uC774 \uC788\uC74C )
spring.devtools.restart.enabled=true


# TODO: login \uAD00\uB828 \uC18D\uC131 \uCD94\uAC00
# spring security/jwt \uC5D0\uC11C \uBE44\uBC00\uD0A4 \uC124\uC815\uC744 \uC704\uD55C \uC18D\uC131
# \uC804\uC790\uC11C\uBA85 : \uACF5\uC6A9\uD0A4/\uBE44\uBC00\uD0A4\uB97C \uC0AC\uC6A9\uD574\uC11C \uC778\uC99D
# JWT setting : \uC544\uB798 \uD0A4\uC774\uB984/\uD0A4\uAC12 \uAC1C\uBC1C\uC790\uAC00 \uC790\uC720\uB86D\uAC8C \uB9CC\uB4E4\uBA74 \uB428
bezkoder.app.jwtSecret= bezKoderSecretKey
# \uD1A0\uD070 \uB9CC\uB8CC\uC2DC\uAC04( \uB2E8\uC704: \uBC00\uB9AC\uC138\uCEE8\uB4DC )
bezkoder.app.jwtExpirationMs= 86400000

# Google simple login setting
spring.security.oauth2.client.registration.google.clientId=816273653807-k6j0vbj88gdd912br79osp5ktbi10ups.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=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
spring.security.oauth2.client.registration.google.scope=email, profile

# Naver simple login setting
spring.security.oauth2.client.registration.naver.clientId=CRIyouo98Tgaj3Vgy4Tp
spring.security.oauth2.client.registration.naver.clientSecret=obI28wA5uH
#spring.security.oauth2.client.registration.naver.redirect_uri=http://localhost:8000/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.redirect_uri=http://localhost:8000/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.scope=email, profile
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.client-name=Naver

# Kakao simple login setting
spring.security.oauth2.client.registration.kakao.clientId=b8e3e030ce6cf9744c73070c82cc4679
spring.security.oauth2.client.registration.kakao.clientSecret=haW903vEwMS2PzhZx5cJSopLrVQaEAoC
spring.security.oauth2.client.registration.kakao.clientAuthenticationMethod=post
spring.security.oauth2.client.registration.kakao.authorizationGrantType=authorization_code
spring.security.oauth2.client.registration.kakao.redirectUri=http://localhost:8000/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.scope=profile_nickname, account_email
spring.security.oauth2.client.registration.kakao.clientName=Kakao

# Naver provider register
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# Kakao provider register
spring.security.oauth2.client.provider.kakao.authorizationUri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.tokenUri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.userInfoUri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.userNameAttribute=id

# \u2705 mybatis \uD328\uD0A4\uC9C0 : \uBAA8\uB378\uC758 \uD328\uD0A4\uC9C0 \uC704\uCE58\uB97C \uC124\uC815
# Model \uC758 \uC704\uCE58
mybatis.type-aliases-package=com.example.backend.dto
# sql\uBB38\uC774 \uC800\uC7A5\uB41C XML \uC704\uCE58 \uC124\uC815( insert, update, delete, select )
mybatis.mapper-locations=classpath:mappers/*.xml
# MyBatis \uC124\uC815
mybatis.configuration.map-underscore-to-camel-case=true

#\uCCA8\uBD80\uD30C\uC77C \uC5C5\uB85C\uB4DC \uC0AC\uC774\uC988 \uC81C\uD55C
#\uAE30\uBCF8 \uC5C5\uB85C\uB4DC \uC0AC\uC774\uC988 : 1MB
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
